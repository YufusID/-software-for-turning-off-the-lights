#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞ —Å –ø–æ–º–æ—â—å—é nmap
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ç–∏!
"""

import subprocess
import socket
import requests
import json
import re
from concurrent.futures import ThreadPoolExecutor
import time

class SmartHomeLightController:
    def __init__(self):
        self.common_ports = {
            'philips_hue': 80,
            'tplink': 9999,
            'lifx': 56700,
            'home_assistant': 8123,
            'tuya': 6668,
            'yeelight': 55443,
            'wiz': 38899
        }
        
        self.known_devices = {
            'philips_hue': ['Philips', 'hue'],
            'tplink': ['TP-Link', 'Kasa'],
            'lifx': ['LIFX'],
            'yeelight': ['Yeelight'],
            'wiz': ['WiZ']
        }

    def scan_network(self, network_range="192.168.1.0/24"):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
        print("üîç –°–∫–∞–Ω–∏—Ä—É—é —Å–µ—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞...")
        
        devices = []
        
        try:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö –ø–æ—Ä—Ç–æ–≤ —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            ports = ",".join(map(str, self.common_ports.values()))
            command = [
                'nmap', '-sS', '-p', ports, 
                '--open', '-T4', network_range
            ]
            
            result = subprocess.run(command, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                devices = self.parse_nmap_output(result.stdout)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è nmap")
                
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
        return devices

    def parse_nmap_output(self, nmap_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ nmap –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = []
        current_ip = None
        
        for line in nmap_output.split('\n'):
            # –ü–æ–∏—Å–∫ IP –∞–¥—Ä–µ—Å–∞
            ip_match = re.search(r'Nmap scan report for ([\d\.]+)', line)
            if ip_match:
                current_ip = ip_match.group(1)
                continue
                
            # –ü–æ–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
            port_match = re.search(r'(\d+)/\w+\s+open', line)
            if port_match and current_ip:
                port = int(port_match.group(1))
                device_type = self.identify_device_by_port(port)
                
                if device_type:
                    devices.append({
                        'ip': current_ip,
                        'port': port,
                        'type': device_type
                    })
                    print(f"üì± –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {current_ip}:{port} ({device_type})")
                    
        return devices

    def identify_device_by_port(self, port):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø–æ—Ä—Ç—É"""
        for device_type, device_port in self.common_ports.items():
            if port == device_port:
                return device_type
        return None

    def try_turn_off_lights(self, device):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        ip = device['ip']
        device_type = device['type']
        
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ {ip} ({device_type})...")
        
        try:
            if device_type == 'philips_hue':
                return self.control_philips_hue(ip)
            elif device_type == 'tplink':
                return self.control_tplink(ip)
            elif device_type == 'yeelight':
                return self.control_yeelight(ip)
            elif device_type == 'wiz':
                return self.control_wiz(ip)
            elif device_type == 'home_assistant':
                return self.control_home_assistant(ip)
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {ip}: {e}")
            return False

    def control_philips_hue(self, ip):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Philips Hue"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ—Å—Ç–µ
            response = requests.get(f"http://{ip}/api/config", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Philips Hue –Ω–∞–π–¥–µ–Ω: {ip}")
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                return True
        except:
            pass
        return False

    def control_tplink(self, ip):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TP-Link —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π TCP –∑–∞–ø—Ä–æ—Å –¥–ª—è TP-Link
            command = '{"system":{"set_relay_state":{"state":0}}}'
            encrypted = self.encrypt_tplink(command)
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect((ip, 9999))
            sock.send(encrypted)
            response = sock.recv(4096)
            sock.close()
            
            print(f"‚úÖ TP-Link —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {ip}")
            return True
        except:
            return False

    def encrypt_tplink(self, data):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è TP-Link (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)"""
        key = 171
        result = bytearray([0, 0, 0, len(data)])
        for char in data:
            a = key ^ ord(char)
            key = a
            result.append(a)
        return bytes(result)

    def control_yeelight(self, ip):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Yeelight"""
        try:
            command = {
                "id": 1,
                "method": "set_power",
                "params": ["off", "smooth", 500]
            }
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect((ip, 55443))
            sock.send((json.dumps(command) + "\r\n").encode())
            response = sock.recv(1024)
            sock.close()
            
            print(f"‚úÖ Yeelight –æ—Ç–∫–ª—é—á–µ–Ω: {ip}")
            return True
        except:
            return False

    def control_wiz(self, ip):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WiZ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
        try:
            command = {
                "method": "setPilot",
                "params": {
                    "state": False
                }
            }
            
            response = requests.post(
                f"http://{ip}:38899/json/set",
                json=command,
                timeout=5
            )
            
            if response.status_code == 200:
                print(f"‚úÖ WiZ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {ip}")
                return True
        except:
            pass
        return False

    def control_home_assistant(self, ip):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Home Assistant"""
        print(f"‚ÑπÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω Home Assistant: {ip}")
        print("   –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
        return False

    def turn_off_all_lights(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞...")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
        devices = self.scan_network()
        
        if not devices:
            print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–º–Ω–æ–≥–æ –¥–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        success_count = 0
        with ThreadPoolExecutor(max_workers=5) as executor:
            results = list(executor.map(self.try_turn_off_lights, devices))
            success_count = sum(results)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ: {success_count}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å: {len(devices) - success_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè† –£–º–Ω—ã–π –¥–æ–º - –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å–≤–µ—â–µ–Ω–∏—è")
    print("=" * 40)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π —Å–µ—Ç–∏!")
    print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π")
    
    controller = SmartHomeLightController()
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
    if confirm != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
    controller.turn_off_all_lights()

if __name__ == "__main__":
    main()