#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞ –≤–æ –≤—Å–µ–º –∑–¥–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π IoT-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º —Ç–∏–ø–∞: KNX, Modbus, BACnet, DALI, OPC UA
"""

import requests
import socket
import json
import time
from typing import Dict, List, Optional

class BuildingLightController:
    def __init__(self):
        # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –ø–æ—Ä—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏–µ–º
        self.building_protocols = {
            'knx': {'port': 3671, 'protocol': 'UDP'},
            'modbus': {'port': 502, 'protocol': 'TCP'},
            'bacnet': {'port': 47808, 'protocol': 'UDP'},
            'dali': {'port': 50000, 'protocol': 'TCP'},
            'opcua': {'port': 4840, 'protocol': 'TCP'},
            'rest_api': {'port': 80, 'protocol': 'HTTP'},
            'mqtt': {'port': 1883, 'protocol': 'TCP'}
        }
        
        # IP –∞–¥—Ä–µ—Å–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏ –∑–¥–∞–Ω–∏—è
        self.common_controllers = [
            '192.168.1.100',  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            '192.168.1.101',  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            '192.168.1.200',  # –®–ª—é–∑ KNX/IP
            '192.168.1.201',  # Modbus TCP —à–ª—é–∑
            '192.168.1.10',   # –°–µ—Ä–≤–µ—Ä OPC UA
            '192.168.1.50',   # BACnet IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            'plc.local',      # –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è PLC
            'building-ctrl.local'
        ]

    def discover_building_controllers(self) -> List[Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏–µ–º"""
        print("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏–µ–º...")
        
        found_controllers = []
        
        for controller_ip in self.common_controllers:
            for protocol_name, protocol_info in self.building_protocols.items():
                if self.check_controller(controller_ip, protocol_info['port'], protocol_info['protocol']):
                    found_controllers.append({
                        'ip': controller_ip,
                        'port': protocol_info['port'],
                        'protocol': protocol_name,
                        'type': protocol_info['protocol']
                    })
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω {protocol_name.upper()} –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: {controller_ip}:{protocol_info['port']}")
        
        return found_controllers

    def check_controller(self, ip: str, port: int, protocol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            if protocol in ['TCP', 'HTTP']:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                result = sock.connect_ex((ip, port))
                sock.close()
                return result == 0
            elif protocol == 'UDP':
                # –î–ª—è UDP –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–∞–∫–µ—Ç
                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                sock.settimeout(2)
                sock.sendto(b'\x00', (ip, port))
                sock.close()
                return True
        except:
            return False
        return False

    def turn_off_lights_via_rest(self, controller_ip: str) -> bool:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ REST API"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ REST API –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            endpoints = [
                f"http://{controller_ip}/api/lighting/all/off",
                f"http://{controller_ip}/api/lighting/zone/all/off",
                f"http://{controller_ip}/api/building/lighting/off",
                f"http://{controller_ip}/api/system/lighting/off",
                f"http://{controller_ip}/rest/lighting/all/off"
            ]
            
            for endpoint in endpoints:
                try:
                    response = requests.post(endpoint, timeout=5)
                    if response.status_code in [200, 201, 202]:
                        print(f"‚úÖ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ REST API: {endpoint}")
                        return True
                except:
                    continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            auth_endpoints = [
                f"http://{controller_ip}/api/control/lighting",
                f"http://{controller_ip}/api/command"
            ]
            
            for endpoint in auth_endpoints:
                try:
                    data = {
                        "command": "lights_off",
                        "zone": "all",
                        "action": "off"
                    }
                    response = requests.post(
                        endpoint, 
                        json=data,
                        timeout=5,
                        auth=('admin', 'admin')  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    )
                    if response.status_code in [200, 201]:
                        print(f"‚úÖ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ REST —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
                        return True
                except:
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ REST API: {e}")
            
        return False

    def turn_off_lights_via_modbus(self, controller_ip: str) -> bool:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Modbus TCP"""
        try:
            # –°–æ–∑–¥–∞–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤
            # Function Code 5 - Write Single Coil (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–ª–µ)
            modbus_message = bytes.fromhex('00010000000601050000FF00')  # Broadcast –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect((controller_ip, 502))
            sock.send(modbus_message)
            response = sock.recv(1024)
            sock.close()
            
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ Modbus –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {controller_ip}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Modbus: {e}")
            return False

    def turn_off_lights_via_knx(self, controller_ip: str) -> bool:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ KNX/IP"""
        try:
            # KNX/IP –ø–∞–∫–µ—Ç –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
            knx_packet = bytes.fromhex(
                '0610020500140801c0a8016404d200000000000000000000'
            )
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(5)
            sock.sendto(knx_packet, (controller_ip, 3671))
            sock.close()
            
            print(f"‚úÖ KNX –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {controller_ip}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ KNX: {e}")
            return False

    def turn_off_lights_via_bacnet(self, controller_ip: str) -> bool:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ BACnet"""
        try:
            # BACnet Who-Is –∑–∞–ø—Ä–æ—Å —Å –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            bacnet_packet = bytes.fromhex(
                '810b000c0120ffff00ff10080c023e0000003f'
            )
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(5)
            sock.sendto(bacnet_packet, (controller_ip, 47808))
            sock.close()
            
            print(f"‚úÖ BACnet –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {controller_ip}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ BACnet: {e}")
            return False

    def turn_off_lights_via_mqtt(self, controller_ip: str) -> bool:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ MQTT"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π MQTT CONNECT –ø–∞–∫–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            mqtt_message = bytes.fromhex(
                '102600044d5154540402003c001a6275696c64696e672f6c69676874696e672f616c6c2f6f6666'
            )
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect((controller_ip, 1883))
            sock.send(mqtt_message)
            sock.close()
            
            print(f"‚úÖ MQTT –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {controller_ip}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ MQTT: {e}")
            return False

    def emergency_light_off(self, controller_ip: str, protocol: str) -> bool:
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        print(f"üö® –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {protocol}...")
        
        if protocol == 'rest_api':
            return self.turn_off_lights_via_rest(controller_ip)
        elif protocol == 'modbus':
            return self.turn_off_lights_via_modbus(controller_ip)
        elif protocol == 'knx':
            return self.turn_off_lights_via_knx(controller_ip)
        elif protocol == 'bacnet':
            return self.turn_off_lights_via_bacnet(controller_ip)
        elif protocol == 'mqtt':
            return self.turn_off_lights_via_mqtt(controller_ip)
        else:
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            methods = [
                self.turn_off_lights_via_rest,
                self.turn_off_lights_via_modbus,
                self.turn_off_lights_via_knx
            ]
            
            for method in methods:
                if method(controller_ip):
                    return True
                    
        return False

    def building_wide_light_off(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–æ –≤—Å–µ–º –∑–¥–∞–Ω–∏–∏"""
        print("üè¢ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è")
        print("=" * 50)
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        controllers = self.discover_building_controllers()
        
        if not controllers:
            print("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å IP-–∞–¥—Ä–µ—Å–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å–µ—Ç—å")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: {len(controllers)}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        success = False
        for controller in controllers:
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ {controller['ip']} ({controller['protocol']})...")
            
            if self.emergency_light_off(controller['ip'], controller['protocol']):
                success = True
                print(f"üéâ –£–°–ü–ï–•! –û—Å–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ {controller['protocol']}")
                break
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ {controller['protocol']}")
        
        if success:
            print("\n" + "=" * 50)
            print("‚úÖ –û–°–í–ï–©–ï–ù–ò–ï –í–û –í–°–ï–ú –ó–î–ê–ù–ò–ò –í–´–ö–õ–Æ–ß–ï–ù–û")
            print("=" * 50)
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏")
            print("   - IP-–∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤")
            print("   - –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    confirm = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ–º –∑–¥–∞–Ω–∏–∏? (yes/NO): ")
    if confirm.lower() != 'yes':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    safety_check = input("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∑–¥–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (CONFIRM/NO): ")
    if safety_check.upper() != 'CONFIRM':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        return
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    controller = BuildingLightController()
    controller.building_wide_light_off()

if __name__ == "__main__":
    main()